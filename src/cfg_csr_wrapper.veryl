import veryl_csr::CsrPkg::*;
module CfgCsrWrapper #(
    param Addr: CsrAddr = 0,
) (
    // Clock
    i_clk : input clock,
    ni_rst: input reset,

    // Standard CSR Interface
    i_csr_ena : input  logic      ,
    i_csr_addr: input  CsrAddr    ,
    i_rs1_data: input  logic  <32>,
    i_rs1     : input  Reg        ,
    i_rd      : input  Reg        ,
    i_csr_op  : input  logic  <3> ,
    o_csr_data: output logic  <32>,

    // External Interrupt Line
    i_interrupt: input logic,
    // External Dispatch Line
    i_dispatch: input logic,

    o_pending: output logic   ,
    o_prio   : output logic<2>,
    o_enabled: output logic   ,
) {
    // Can we just have it here?
    var data      : logic<32>;
    assign o_csr_data = data;

    // Pending bit CSR interface
    var csr_w_ena : logic    ;
    var csr_w_data: logic<32>;
    var csr_r_ena : logic    ;
    var csr_r_data: logic<32>;
    inst csr: veryl_csr::Csr #(
        Addr       : Addr,
        FieldOffset: 0   ,
        FieldWidth : 4   ,
    ) (
        i_csr_ena               ,
        i_csr_addr              ,
        i_rs1_data              ,
        i_rs1                   ,
        i_rd                    ,
        i_csr_op                ,
        i_reg_data  : data      ,
        o_reg_w_ena : csr_w_ena ,
        o_reg_w_data: csr_w_data,
        o_reg_r_ena : csr_r_ena ,
        o_reg_r_data: csr_r_data,
    );
    let csr_state        : logic<4> = if csr_w_ena ? csr_w_data[3:0] : data[3:0];
    let csr_pending_state: logic    = csr_state[0];
    let csr_enabled_state: logic    = csr_state[1];
    let csr_prio_state   : logic<2> = csr_state[3:2];

    let pending_state: logic = csr_pending_state | i_interrupt;
    assign o_pending     = pending_state;
    assign o_prio        = csr_prio_state;
    assign o_enabled     = csr_enabled_state;

    let final_pending_state: logic = pending_state & !i_dispatch;

    let csr_data: logic<32> = if csr_w_ena ? {csr_w_data[31:1], final_pending_state} : {data[31:1], final_pending_state};
    always_ff {
        if_reset {
            data = 0;
        } else {
            data = csr_data;
        }
    }
}

#[test(csr_wrapper)]
embed (inline) sv{{{
    module test;

        import veryl_csr_CsrPkg::*;
        logic i_clk;
        logic ni_rst;

        logic i_csr_ena;
        logic [11:0] i_csr_addr;
        logic [31:0] i_rs1_data;
        Reg i_rs1;
        Reg i_rd;
        logic[2:0] i_csr_op;
        logic[31:0] o_data;

        logic ext_interrupt;
        logic dispatch;

        logic o_pending;
        logic o_enabled;
        logic[1:0] o_prio;
        veryl_nclic_CfgCsrWrapper #() csr (
            .i_clk,
            .ni_rst,
            .i_csr_ena,
            .i_csr_addr,
            .i_rs1_data,
            .i_rs1     ,
            .i_rd      ,
            .i_csr_op  ,
            .o_csr_data(o_data),
            .i_interrupt(ext_interrupt),
            .i_dispatch(dispatch),
            .o_pending,
            .o_enabled,
            .o_prio
        );
        initial begin
            i_clk = 0;
            ni_rst = 0;

            i_csr_ena = 0;
            i_csr_addr = 'h000;
            i_rs1_data = 0;
            i_rs1 = 0;
            i_rd = 0;
            i_csr_op = 0;
            ext_interrupt = 0;
            dispatch = 0;
            #10; i_clk = 1; #10; i_clk = 0;
            ni_rst = 1;
            #10; i_clk = 1; #10; i_clk = 0;
            i_csr_ena = 1;
            i_rs1_data = 'b1110;
            i_csr_op = CSRRW;
            i_rd = 1;
            #10; i_clk = 1; #10; i_clk = 0;
            i_csr_ena = 0;
            i_rs1_data = 'b1111;
            i_csr_op = CSRRW;
            i_rd = 1;
            #10; i_clk = 1; #10; i_clk = 0;
            ext_interrupt = 1;
            #10; i_clk = 1; #10; i_clk = 0;
            ext_interrupt = 0;
            i_csr_ena = 1;
            i_rs1_data = 'b1000;
            i_csr_op = CSRRC;
            i_rd = 1;
            #10; i_clk = 1; #10; i_clk = 0;
            i_rs1_data = 'b0100;
            #10; i_clk = 1; #10; i_clk = 0;
            i_rs1_data = 'b0010;
            #10; i_clk = 1; #10; i_clk = 0;
            i_rs1_data = 'b0001;
            #10; i_clk = 1; #10; i_clk = 0;
            i_csr_op = CSRRS;
            i_rs1_data = 'b0000;
            #10; i_clk = 1; #10; i_clk = 0;
            i_rs1_data = 'b0001;
            #10; i_clk = 1; #10; i_clk = 0;
            i_rs1_data = 'b0010;
            #10; i_clk = 1; #10 i_clk = 0;
            i_rs1_data = 'b0100;
            #10; i_clk = 1; #10 i_clk = 0;
            i_rs1_data = 'b1000;
            #10; i_clk = 1; #10 i_clk = 0;
            i_rs1_data = 'b0110;
            i_csr_op = CSRRC;
            #10; i_clk = 1; #10 i_clk = 0;
            i_csr_ena = 0;
            #10; i_clk = 1; #10 i_clk = 0;
            $finish;
        end
    endmodule
}}}
